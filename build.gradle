plugins {
    id 'idea'
    id 'groovy'
    id 'org.asciidoctor.convert' version '2.4.0'
}

wrapper {
    gradleVersion = '6.7.1'
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    repositories {
        jcenter()
    }

    /*
        Inspired by https://solidsoft.wordpress.com/2014/11/13/gradle-tricks-display-dependencies-for-all-subprojects-in-multi-project-build/

        For example:
        gw allDeps --configuration implementation
        gw allDeps --configuration testImplementation
        gw allDeps --configuration api
    */
    task allDeps(type: DependencyReportTask) {}
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

asciidoctor {
    sourceDir file('.')
    sources {
        include 'readme.adoc'
    }
    outputDir file('build/docs')
}

subprojects {
    version = '0.1'
}

// Effectively a list of projects below is all subprojects. 
// In that case instead of configure(...) syntax one could use simply 'subprojects'
// That configure(...) is useful when one needs to apply it only to a subset of subprojects.

configure(subprojects.findAll {
    ['fun-with-groovy', 'geb-bare-bone', 'grokalg', 'misc', 'parameterize', 'run-me'].contains(it.name)
}) {
    apply plugin: 'groovy'

    dependencies {
        implementation 'org.codehaus.groovy:groovy-all:3.0.7'
        implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
        implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
        testImplementation 'org.spockframework:spock-core:2.0-M4-groovy-3.0', {
            exclude module: 'groovy-all'
        }
        testImplementation 'org.spockframework:spock-junit4:2.0-M4-groovy-3.0' //Temporary workaround for JUnit 4 rules
        // New Junit...
        testImplementation 'org.junit.platform:junit-platform-testkit:1.7.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'

        //TODO It still throws an error...
        testImplementation('com.athaydes:spock-reports:2.0-RC2') {
            transitive = false
        }
    }
}

subprojects {
    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            events 'passed', 'failed'
            exceptionFormat 'full'

            debug {
                events 'passed', 'skipped', 'failed'
                showStackTraces true
                exceptionFormat 'full'
            }
        }
        useJUnitPlatform()
    }
}
