//TODO This is only a not-working workaround to enable resolving Grapes in Intellij - TBC
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.ivy:ivy:2.5.2'
    }
}

plugins {
    id 'com.github.erdi.idea-base' version '2.2'
    id 'org.asciidoctor.jvm.convert' version '4.0.3'
}

wrapper {
    //Gotcha! Version 8.7 fails with com.github.erdi.webdriver-binaries
    gradleVersion = '8.6'  // Current 8.10
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    repositories {
        mavenCentral()
    }

    /*
        Inspired by https://solidsoft.wordpress.com/2014/11/13/gradle-tricks-display-dependencies-for-all-subprojects-in-multi-project-build/

        For example:
        gw allDeps --configuration implementation
        gw allDeps --configuration testImplementation
        gw allDeps --configuration api
    */
    task allDeps(type: DependencyReportTask) {}
}

asciidoctor {
    sourceDir file('.')
    sources {
        include 'readme.adoc'
    }
    outputDir file('build/docs')
}

subprojects {
    version = '0.1'
}

// Effectively a list of projects below is all subprojects. 
// In that case instead of configure(...) syntax one could use simply 'subprojects'
// That configure(...) is useful when one needs to apply it only to a subset of subprojects.

configure(subprojects.findAll {
    [
        'fun-with-groovy',
        'geb-bare-bone',
        'grokalg',
        'misc',
        'parameterize',
        'run-me'
    ].contains(it.name)
}) {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'idea'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    dependencies {
        implementation 'org.apache.groovy:groovy-all:4.0.22'
        implementation 'org.apache.groovy:groovy-json:4.0.22'
        implementation 'org.apache.groovy:groovy-yaml:4.0.22'
        implementation 'org.apache.groovy:groovy-xml:4.0.22'
        implementation 'org.apache.groovy:groovy-ginq:4.0.22'
        implementation 'org.slf4j:slf4j-api:2.0.16'
        implementation 'ch.qos.logback:logback-classic:1.5.7'
        def spockVersion = '2.4-M4-groovy-4.0'
        implementation "org.spockframework:spock-core:${spockVersion}", {
            exclude group: 'org.apache.groovy'
        }
        implementation 'org.apache.commons:commons-text:1.12.0'
        implementation 'commons-io:commons-io:2.16.1'

        //TODO it throws sometimes OOM (2023-06-12)
        testImplementation('com.athaydes:spock-reports:2.5.1-groovy-4.0') {
            transitive = false
        }

        // New Junit...
        testImplementation 'org.junit.platform:junit-platform-testkit:1.11.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'

    }

    tasks.withType(GroovyCompile).configureEach {
        options.incremental = true
        options.incrementalAfterFailure = true
        doFirst {
            logger.lifecycle 'Explicitly enabling incremental compilation :{} in task: {}', options.incremental, it.name
        }
        //See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.GroovyCompileOptions.html
        configure(groovyOptions.forkOptions) {
            memoryInitialSize = '512m'
            memoryMaximumSize = '6g'
            jvmArgs = ['-Xms512m', '-Xmx6g']
        }
    }

    //TODO read more about that 'configureEach' in https://docs.gradle.org/current/userguide/task_configuration_avoidance.html
    //tasks.withType.configureEach(Test) {
    tasks.withType(Test) {
        // See https://blog.gradle.org/stop-rerunning-tests
        systemProperty "random.testing.seed", new Random().nextInt()

        testLogging {
            showStandardStreams = true
            events 'passed', 'failed'
            exceptionFormat 'full'

            debug {
                events 'passed', 'skipped', 'failed'
                showStackTraces true
                exceptionFormat 'full'
            }
        }
        useJUnitPlatform()
    }


    task removeTestResults(type: Delete) {
        group = 'other'
        description = 'removes reports and logs'
        delete "reports"
        delete "logs"
    }

    task showSomeConfig() {
        group = 'other'
        description = 'shows some configuration'
        doFirst {
            logger.lifecycle "List of dirs with test classes for project {}", project
            FileCollection testDirs = project.sourceSets.test.output.classesDirs
            List<String> paths = testDirs.collect { File file -> file.path }
            logger.lifecycle ">>> ${paths}"
        }
    }
}
